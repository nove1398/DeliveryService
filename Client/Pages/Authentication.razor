@page "/auth/login"
@using DeliveryService.Shared.API
@using DeliveryService.Shared.Models
@layout LoginLayout
@inject HttpHandler Http
@inject NavigationManager Navigation
@inject AuthStateHandler AuthState


    <div class="d-flex align-content-center align-items-center h-100">
        @if (!isRegister)
        {
            <div class="p-3 row rounded shadow-lg mx-auto col-md-6 ">
                <h3 class="border-bottom border-dark text-info w-100">Sign In</h3>
                <div class="p-2">
                    @statusMessage
                </div>
                <EditForm @ref="loginform" Model="loginRequest" OnValidSubmit="OnLoginSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="loginRequest.Email" />
                        <ValidationMessage For="@(()=> loginRequest.Email)" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText type="password" class="form-control" @bind-Value="loginRequest.Password" />
                        <ValidationMessage For="@(()=> loginRequest.Password)" />
                    </div>
                    <p>Not yet registered? click <a href="#" @onclick="((e) => { isRegister = !isRegister; })" @onclick:preventDefault>here</a> to sign up</p>
                    <button type="submit" class="btn btn-outline-primary btn-sm">Sign In</button>
                </EditForm>
            </div>
        }
        else
        {
                <EditForm OnValidSubmit="OnRegisterSubmit" Model="registerRequest" class="rounded border shadow-lg mx-auto  w-100 row">
                    <ObjectGraphDataAnnotationsValidator />
                    <!--Two sided registration-->
                    <div class="p-2 bg-white col-md-6 col-sm-12">
                        <h3 class="border-bottom border-secondary text-info">Personal Details 1 of 2</h3>
                        <div class="form-group">
                            <label>First Name</label>
                            <InputText class="form-control" @bind-Value="registerRequest.FirstName" />
                            <ValidationMessage For="@(() => registerRequest.FirstName)" />
                        </div>
                        <div class="form-group">
                            <label>Last Name</label>
                            <InputText class="form-control" @bind-Value="registerRequest.LastName" />
                            <ValidationMessage For="@(() => registerRequest.LastName)" />
                        </div>
                        <div class="form-group">
                            <label>Password</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Password" />
                            <ValidationMessage For="@(() => registerRequest.Password)" />
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Email" />
                            <ValidationMessage For="@(() => registerRequest.Email)" />
                        </div>
                        <div class="form-group">
                            <label>Contact #</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Contact" />
                            <ValidationMessage For="@(() => registerRequest.Contact)" />
                        </div>
                        <div class="form-group">
                            <label>Nickname</label>
                            <InputText class="form-control" @bind-Value="registerRequest.NickName" />
                            <ValidationMessage For="@(() => registerRequest.NickName)" />
                        </div>
                       
                    </div>
                    <div class="p-2 bg-info text-white col-md-6 col-sm-12">
                        <h3 class="border-bottom border-secondary">Personal Details 2 of 2</h3>
                        <div class="form-group">
                            <label>Sex</label>
                            <InputSelect class="form-control" @bind-Value="registerRequest.Sex">
                                <option value="@DeliveryService.Shared.Models.AppUser.Gender.Male">Male</option>
                                <option value="@DeliveryService.Shared.Models.AppUser.Gender.Female">Female</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => registerRequest.Sex)" />
                        </div>
                        <div class="form-group">
                            <label>Date of Birth</label>
                            <InputDate class="form-control" @bind-Value="registerRequest.DateOfBirth" />
                            <ValidationMessage For="@(() => registerRequest.DateOfBirth)" />
                        </div>
                        <div class="form-group">
                            <label>Address Line 1</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Address.AddressLine1" />
                            <ValidationMessage For="@(() => registerRequest.Address.AddressLine1)" />
                        </div>
                        <div class="form-group">
                            <label>Address Line 2</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Address.AddressLine2" />
                            <ValidationMessage For="@(() => registerRequest.Address.AddressLine2)" />
                        </div>
                        <div class="form-group">
                            <label>Parish</label>
                            <InputSelect class="form-control" @bind-Value="registerRequest.Address.Parish" >
                                @foreach(var parish in Constants.Parishes)
                                {
                                    <option value="@parish">@parish</option>
                                }
                                </InputSelect>
                            <ValidationMessage For="@(() => registerRequest.Address.Parish)" />
                        </div>
                        <div class="form-group">
                            <label>Country</label>
                            <InputText class="form-control" @bind-Value="registerRequest.Address.Country" disabled />
                            <ValidationMessage For="@(() => registerRequest.Address.Country)" />
                        </div>

                        <p>Already have an account? click <a href="#" @onclick="(()=>isRegister = !isRegister)" class="text-warning">here</a> to sign in</p>
                        <button type="submit" class="btn btn-outline-warning btn-sm">Sign Up</button>
                    </div>
                    <!--End two sided registration-->
                </EditForm>
        }



    </div>


@code {
    private AuthRequest loginRequest = new AuthRequest();
    private RegisterRequest registerRequest = new RegisterRequest();
    private EditForm loginform { get; set; }
    private string hideMenu = "d-none";
    private bool isRegister = false;
    private string statusMessage = string.Empty;
    
    private async Task OnLoginSubmit()
    {
        var response =  await Http.PostAsync<AuthResponse>("api/auth/login", loginRequest);
        if (response.Successfull)
        {
            await AuthState.SetTokenAsync(response.Token, DateTime.Now.AddDays(30));
            await AuthState.GetAuthenticationStateAsync();
            Navigation.NavigateTo("/");
        }
        else
        {
            statusMessage = response.Error;
        }
    }

    public async Task OnRegisterSubmit()
    {
        var response =   await Http.PostAsync<ResponseModel<AppUser>>("/api/auth/register",registerRequest);
        if (response.IsSuccess)
        {
            statusMessage = response.Message;
        }
        else
        {
            statusMessage = "Failed to create user";
        }
    }
}
