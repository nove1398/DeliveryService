@inject HttpHandler Http


<h3>Register User</h3>

<EditForm OnValidSubmit="OnRegisterSubmit" Model="registerRequest" class="rounded border shadow-lg mx-auto  w-100 row">
    <ObjectGraphDataAnnotationsValidator />
    <!--Two sided registration-->
    <div class="p-2 bg-white col-md-6 col-sm-12">
        <h3 class="border-bottom border-secondary text-info">Personal Details 1 of 2</h3>
        <div class="form-group">
            <label>First Name</label>
            <InputText class="form-control" @bind-Value="registerRequest.FirstName" />
            <ValidationMessage For="@(() => registerRequest.FirstName)" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="registerRequest.LastName" />
            <ValidationMessage For="@(() => registerRequest.LastName)" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText class="form-control" @bind-Value="registerRequest.Password" />
            <ValidationMessage For="@(() => registerRequest.Password)" />
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="registerRequest.Email" />
            <ValidationMessage For="@(() => registerRequest.Email)" />
        </div>
        <div class="form-group">
            <label>Contact #</label>
            <InputText class="form-control" @bind-Value="registerRequest.Contact" />
            <ValidationMessage For="@(() => registerRequest.Contact)" />
        </div>
        <div class="form-group">
            <label>Nickname</label>
            <InputText class="form-control" @bind-Value="registerRequest.NickName" />
            <ValidationMessage For="@(() => registerRequest.NickName)" />
        </div>

    </div>
    <div class="p-2 bg-info text-white col-md-6 col-sm-12">
        <h3 class="border-bottom border-secondary">Personal Details 2 of 2</h3>
        <div class="form-group">
            <label>Sex</label>
            <InputSelect class="form-control" @bind-Value="registerRequest.Sex">
                <option value="@DeliveryService.Shared.Models.AppUser.Gender.Male">Male</option>
                <option value="@DeliveryService.Shared.Models.AppUser.Gender.Female">Female</option>
            </InputSelect>
            <ValidationMessage For="@(() => registerRequest.Sex)" />
        </div>
        <div class="form-group">
            <label>Date of Birth</label>
            <InputDate class="form-control" @bind-Value="registerRequest.DateOfBirth" />
            <ValidationMessage For="@(() => registerRequest.DateOfBirth)" />
        </div>
        <div class="form-group">
            <label>Address Line 1</label>
            <InputText class="form-control" @bind-Value="registerRequest.Address.AddressLine1" />
            <ValidationMessage For="@(() => registerRequest.Address.AddressLine1)" />
        </div>
        <div class="form-group">
            <label>Address Line 2</label>
            <InputText class="form-control" @bind-Value="registerRequest.Address.AddressLine2" />
            <ValidationMessage For="@(() => registerRequest.Address.AddressLine2)" />
        </div>
        <div class="form-group">
            <label>Parish</label>
            <InputSelect class="form-control" @bind-Value="registerRequest.Address.Parish">
                @foreach (var parish in Constants.Parishes)
                {
                    <option value="@parish">@parish</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => registerRequest.Address.Parish)" />
        </div>
        <div class="form-group">
            <label>Country</label>
            <InputText class="form-control" @bind-Value="registerRequest.Address.Country" disabled />
            <ValidationMessage For="@(() => registerRequest.Address.Country)" />
        </div>
        <button type="submit" class="btn btn-outline-warning btn-sm">Sign Up</button>
    </div>
    <!--End two sided registration-->
</EditForm>

@code {
    private RegisterRequest registerRequest = new RegisterRequest();
    private string statusMessage = string.Empty;


    public async Task OnRegisterSubmit()
    {
        var response = await Http.PostAsync<ResponseModel<AppUser>>("/api/auth/register", registerRequest);
        if (response.IsSuccess)
        {
            statusMessage = response.Message;
        }
        else
        {
            statusMessage = "Failed to create user";
        }
    }
}
